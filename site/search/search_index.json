{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Get Started"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"calculations/","text":"Calculations Factors Functions to calculate nutrition factors. calc_bmi ( height , weight ) Calculate the BMI (Body Mass Index) Parameters: Name Type Description Default height int height in cms required weight int weight in kilograms required Returns: Name Type Description bmi float The BMI factor Source code in notebooks\\calculations\\factors.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 def calc_bmi ( height : float , weight : float ) -> float : \"\"\" Calculate the BMI (Body Mass Index) Args: height (int): height in cms weight (int): weight in kilograms Returns: bmi (float): The BMI factor \"\"\" height /= 100 return weight / ( height * height ) calc_eer ( gender , age , height , weight , activity ) Function to calculate the ESTIMATED ENERGY REQUIREMENT (EER) Parameters: Name Type Description Default gender str male or female required age float year required height float cm required weight float kilogram required activity str sedentary (Daily PAL range: 1.0 - 1.39) low_active (Daily PAL range: 1.4 - 1.59) active (Daily PAL range: 1.6 - 1.89) very_active (Daily PAL range: 1.9 - 2.50) required Returns: Name Type Description eer float The EER factor Source code in notebooks\\calculations\\factors.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 def calc_eer ( gender : str , age : float , height : float , weight : float , activity : str , ) -> float : '''Function to calculate the ESTIMATED ENERGY REQUIREMENT (EER) Args: gender (str): male or female age (float): year height (float): cm weight (float): kilogram activity (str): sedentary (Daily PAL range: 1.0 - 1.39)\\n low_active (Daily PAL range: 1.4 - 1.59)\\n active (Daily PAL range: 1.6 - 1.89)\\n very_active (Daily PAL range: 1.9 - 2.50)\\n Returns: eer (float): The EER factor ''' bmi = calc_bmi ( weight = weight , height = height ) eer = 0.0 # TODO: Calculate correctly the PAL PAL = 1.5 # active_fact height /= height if ( gender == 'male' ): if ( age >= 9 and age <= 18 ): eer = 88.5 - 61.9 * age + PAL * ( 26.7 * weight + 903 * height ) + 25 elif ( age > 18 ): eer = 662 - ( 9.53 * age ) + PAL * ( 15.91 * weight + 539.6 * height ) else : return 0.0 # TODO: Resolve year error else : if ( age >= 9 and age <= 18 ): eer = 135.3 - ( 30.8 * age ) + PAL * ( 10.0 * weight + 934 * height ) + 25 elif ( age > 18 ): eer = 354 - ( 6.91 * age ) + PAL * ( 9.36 * weight + 726 * height ) else : return 0.0 # TODO: Resolve year error # Pregnancy (14-50 years old) # 1st trimester EER = Non-pregnant EER + 0 # 2nd trimester EER = Non-pregnant EER + 340 # 3rd trimester EER = Non-pregnant EER + 452 # Lactation # 0-6 months postpartum EER = Non-pregnant EER + 330 # 7-12 months postpartum EER = Non-pregnant EER + 400 # Overweight or obese children, 3-18 years old (maintenance) # Male TEE = -114 -50.9 x Age [y] + PA x (19.5 x Wt [kg] + 1161.4 x Ht [m]) # Female TEE = 389 - 41.2 x Age [y] + PA x (15 x Wt [kg] + 701.6 x Ht [m]) return eer","title":"Calculations"},{"location":"calculations/#calculations","text":"","title":"Calculations"},{"location":"calculations/#factors","text":"Functions to calculate nutrition factors.","title":"Factors"},{"location":"calculations/#notebooks.calculations.factors.calc_bmi","text":"Calculate the BMI (Body Mass Index) Parameters: Name Type Description Default height int height in cms required weight int weight in kilograms required Returns: Name Type Description bmi float The BMI factor Source code in notebooks\\calculations\\factors.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 def calc_bmi ( height : float , weight : float ) -> float : \"\"\" Calculate the BMI (Body Mass Index) Args: height (int): height in cms weight (int): weight in kilograms Returns: bmi (float): The BMI factor \"\"\" height /= 100 return weight / ( height * height )","title":"calc_bmi()"},{"location":"calculations/#notebooks.calculations.factors.calc_eer","text":"Function to calculate the ESTIMATED ENERGY REQUIREMENT (EER) Parameters: Name Type Description Default gender str male or female required age float year required height float cm required weight float kilogram required activity str sedentary (Daily PAL range: 1.0 - 1.39) low_active (Daily PAL range: 1.4 - 1.59) active (Daily PAL range: 1.6 - 1.89) very_active (Daily PAL range: 1.9 - 2.50) required Returns: Name Type Description eer float The EER factor Source code in notebooks\\calculations\\factors.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 def calc_eer ( gender : str , age : float , height : float , weight : float , activity : str , ) -> float : '''Function to calculate the ESTIMATED ENERGY REQUIREMENT (EER) Args: gender (str): male or female age (float): year height (float): cm weight (float): kilogram activity (str): sedentary (Daily PAL range: 1.0 - 1.39)\\n low_active (Daily PAL range: 1.4 - 1.59)\\n active (Daily PAL range: 1.6 - 1.89)\\n very_active (Daily PAL range: 1.9 - 2.50)\\n Returns: eer (float): The EER factor ''' bmi = calc_bmi ( weight = weight , height = height ) eer = 0.0 # TODO: Calculate correctly the PAL PAL = 1.5 # active_fact height /= height if ( gender == 'male' ): if ( age >= 9 and age <= 18 ): eer = 88.5 - 61.9 * age + PAL * ( 26.7 * weight + 903 * height ) + 25 elif ( age > 18 ): eer = 662 - ( 9.53 * age ) + PAL * ( 15.91 * weight + 539.6 * height ) else : return 0.0 # TODO: Resolve year error else : if ( age >= 9 and age <= 18 ): eer = 135.3 - ( 30.8 * age ) + PAL * ( 10.0 * weight + 934 * height ) + 25 elif ( age > 18 ): eer = 354 - ( 6.91 * age ) + PAL * ( 9.36 * weight + 726 * height ) else : return 0.0 # TODO: Resolve year error # Pregnancy (14-50 years old) # 1st trimester EER = Non-pregnant EER + 0 # 2nd trimester EER = Non-pregnant EER + 340 # 3rd trimester EER = Non-pregnant EER + 452 # Lactation # 0-6 months postpartum EER = Non-pregnant EER + 330 # 7-12 months postpartum EER = Non-pregnant EER + 400 # Overweight or obese children, 3-18 years old (maintenance) # Male TEE = -114 -50.9 x Age [y] + PA x (19.5 x Wt [kg] + 1161.4 x Ht [m]) # Female TEE = 389 - 41.2 x Age [y] + PA x (15 x Wt [kg] + 701.6 x Ht [m]) return eer","title":"calc_eer()"},{"location":"dataframes/","text":"DataFrames Functions to generate some Dataframes about nutritions of the people. get_nutrients ( df ) Extract dataframe with the sum of each nutrient by person Parameters: Name Type Description Default df DataFrame A dataframe with nutrients in columns required Returns: Name Type Description df DataFrame A dataframe with the sum of each nutrient by person Source code in notebooks\\dataframes\\get_nutrition.py 9 10 11 12 13 14 15 16 17 18 19 20 def get_nutrients ( df : DataFrame ) -> DataFrame : '''Extract dataframe with the sum of each nutrient by person Args: df (DataFrame): A dataframe with nutrients in columns Returns: df (DataFrame): A dataframe with the sum of each nutrient by person ''' dfNutrition = df [ [ 'PESSOA' ] + list ( nutrients . keys ()) ] return dfNutrition . groupby ( \"PESSOA\" , as_index = False ) . sum () get_nutrients_dif ( df ) Extract dataframe with the difference between the optinal nutrition and the current nutrition of each person. The dateframe must have the columns: GENDER:str, AGE:float, HEIGHT:float, WEIGHT:float, ACTIVITY:str, Parameters: Name Type Description Default df DataFrame A dataframe with nutrients in columns required Returns: Name Type Description df DataFrame A dataframe with the sum of each nutrient by person Source code in notebooks\\dataframes\\get_nutrition.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 def get_nutrients_dif ( df : DataFrame ) -> DataFrame : '''Extract dataframe with the difference between the optinal nutrition and the current nutrition of each person. The dateframe must have the columns: GENDER:str, AGE:float, HEIGHT:float, WEIGHT:float, ACTIVITY:str, Args: df (DataFrame): A dataframe with nutrients in columns Returns: df (DataFrame): A dataframe with the sum of each nutrient by person ''' df = df . copy () for nutrient in nutrients : df [ nutrient + '_DIFF' ] = df [ nutrient ] - get_right_nutrition ( df [ 'EER' ])[ nutrient ] return df","title":"Dataframes"},{"location":"dataframes/#dataframes","text":"Functions to generate some Dataframes about nutritions of the people.","title":"DataFrames"},{"location":"dataframes/#notebooks.dataframes.get_nutrition.get_nutrients","text":"Extract dataframe with the sum of each nutrient by person Parameters: Name Type Description Default df DataFrame A dataframe with nutrients in columns required Returns: Name Type Description df DataFrame A dataframe with the sum of each nutrient by person Source code in notebooks\\dataframes\\get_nutrition.py 9 10 11 12 13 14 15 16 17 18 19 20 def get_nutrients ( df : DataFrame ) -> DataFrame : '''Extract dataframe with the sum of each nutrient by person Args: df (DataFrame): A dataframe with nutrients in columns Returns: df (DataFrame): A dataframe with the sum of each nutrient by person ''' dfNutrition = df [ [ 'PESSOA' ] + list ( nutrients . keys ()) ] return dfNutrition . groupby ( \"PESSOA\" , as_index = False ) . sum ()","title":"get_nutrients()"},{"location":"dataframes/#notebooks.dataframes.get_nutrition.get_nutrients_dif","text":"Extract dataframe with the difference between the optinal nutrition and the current nutrition of each person. The dateframe must have the columns: GENDER:str, AGE:float, HEIGHT:float, WEIGHT:float, ACTIVITY:str, Parameters: Name Type Description Default df DataFrame A dataframe with nutrients in columns required Returns: Name Type Description df DataFrame A dataframe with the sum of each nutrient by person Source code in notebooks\\dataframes\\get_nutrition.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 def get_nutrients_dif ( df : DataFrame ) -> DataFrame : '''Extract dataframe with the difference between the optinal nutrition and the current nutrition of each person. The dateframe must have the columns: GENDER:str, AGE:float, HEIGHT:float, WEIGHT:float, ACTIVITY:str, Args: df (DataFrame): A dataframe with nutrients in columns Returns: df (DataFrame): A dataframe with the sum of each nutrient by person ''' df = df . copy () for nutrient in nutrients : df [ nutrient + '_DIFF' ] = df [ nutrient ] - get_right_nutrition ( df [ 'EER' ])[ nutrient ] return df","title":"get_nutrients_dif()"},{"location":"dictionaries/","text":"Dictionaries Nutrients get_right_nutrition ( eer ) Given the EER factor, retuns a dictionary with the right nutrition Parameters: Name Type Description Default eer float EER factor required Returns: Type Description dict nutrition dictionary (dict): Dictionary with the right nutrition of each nutrient for a specific person with EER factor Source code in notebooks\\dictionaries\\nutrients.py 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 def get_right_nutrition ( eer : float ) -> dict : '''Given the EER factor, retuns a dictionary with the right nutrition Args: eer (float): EER factor Returns: nutrition dictionary (dict): Dictionary with the right nutrition of each nutrient for a specific person with EER factor ''' # TODO: Define the right quantities # FROM Eliseu 2020 # Negative means lower than nutrients_quantiy = { \"ENERGIA_KCAL\" : eer , \"CHOTOT\" : eer * ( 55 / 100 ), # 55-75 eer \"PTN\" : eer * ( 10 / 100 ), # 10-15 eer \"LIP\" : ( - 1 ) * eer * ( 30 / 100 ), # 15\u201330 eer \"FIBRA\" : 0 , \"COLEST\" : ( - 1 ) * 300 , \"CALCIO\" : 868 , \"SODIO\" : 0 , \"POTASSIO\" : 3510 , \"FERRO\" : 6.8 , \"MAGNESIO\" : 303 , \"TIAMINA\" : 0.9 , \"RIBOFLAVINA\" : 1 , \"NIACINA\" : 11.5 , \"PIRIDOXAMINA\" : 1.1 , \"COBALAMINA\" : 2 , \"VITC\" : 66.1 , \"VITA_RAE\" : 560 , \"COBRE\" : 0.7 , \"FOLATO\" : 322 , \"ZINCO\" : 8 , \"FOSFORO\" : 649 , } return nutrients_quantiy Region UFtoName ( uf ) Given a UF code, the name of the state Parameters: Name Type Description Default uf int UF Code required Returns: Name Type Description state str Name of the state Source code in notebooks\\dictionaries\\regions.py 1 2 3 4 5 6 7 8 9 10 def UFtoName ( uf : int ) -> str : '''Given a UF code, the name of the state Args: uf (int): UF Code Returns: state (str): Name of the state ''' return UF_code . get ( uf , dict ()) . get ( 'name' , '' ) UFtoNameRegion ( uf ) Given a UF code, retuns the dictionary of the region Parameters: Name Type Description Default uf int UF Code required Returns: Type Description dict region dictonary (dict): Dictionary of the region Source code in notebooks\\dictionaries\\regions.py 24 25 26 27 28 29 30 31 32 33 def UFtoNameRegion ( uf : int ) -> dict : '''Given a UF code, retuns the dictionary of the region Args: uf (int): UF Code Returns: region dictonary (dict): Dictionary of the region ''' return UF_code . get ( uf , dict ()) UFtoRegion ( uf ) Given a UF code, retuns the name of the region Parameters: Name Type Description Default uf int UF Code required Returns: Type Description str region name (dict): Name of the region Source code in notebooks\\dictionaries\\regions.py 12 13 14 15 16 17 18 19 20 21 def UFtoRegion ( uf : int ) -> str : '''Given a UF code, retuns the name of the region Args: uf (int): UF Code Returns: region name (dict): Name of the region ''' return UF_code . get ( uf , dict ()) . get ( 'region' , '' )","title":"Dictonaries"},{"location":"dictionaries/#dictionaries","text":"","title":"Dictionaries"},{"location":"dictionaries/#nutrients","text":"","title":"Nutrients"},{"location":"dictionaries/#notebooks.dictionaries.nutrients.get_right_nutrition","text":"Given the EER factor, retuns a dictionary with the right nutrition Parameters: Name Type Description Default eer float EER factor required Returns: Type Description dict nutrition dictionary (dict): Dictionary with the right nutrition of each nutrient for a specific person with EER factor Source code in notebooks\\dictionaries\\nutrients.py 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 def get_right_nutrition ( eer : float ) -> dict : '''Given the EER factor, retuns a dictionary with the right nutrition Args: eer (float): EER factor Returns: nutrition dictionary (dict): Dictionary with the right nutrition of each nutrient for a specific person with EER factor ''' # TODO: Define the right quantities # FROM Eliseu 2020 # Negative means lower than nutrients_quantiy = { \"ENERGIA_KCAL\" : eer , \"CHOTOT\" : eer * ( 55 / 100 ), # 55-75 eer \"PTN\" : eer * ( 10 / 100 ), # 10-15 eer \"LIP\" : ( - 1 ) * eer * ( 30 / 100 ), # 15\u201330 eer \"FIBRA\" : 0 , \"COLEST\" : ( - 1 ) * 300 , \"CALCIO\" : 868 , \"SODIO\" : 0 , \"POTASSIO\" : 3510 , \"FERRO\" : 6.8 , \"MAGNESIO\" : 303 , \"TIAMINA\" : 0.9 , \"RIBOFLAVINA\" : 1 , \"NIACINA\" : 11.5 , \"PIRIDOXAMINA\" : 1.1 , \"COBALAMINA\" : 2 , \"VITC\" : 66.1 , \"VITA_RAE\" : 560 , \"COBRE\" : 0.7 , \"FOLATO\" : 322 , \"ZINCO\" : 8 , \"FOSFORO\" : 649 , } return nutrients_quantiy","title":"get_right_nutrition()"},{"location":"dictionaries/#region","text":"","title":"Region"},{"location":"dictionaries/#notebooks.dictionaries.regions.UFtoName","text":"Given a UF code, the name of the state Parameters: Name Type Description Default uf int UF Code required Returns: Name Type Description state str Name of the state Source code in notebooks\\dictionaries\\regions.py 1 2 3 4 5 6 7 8 9 10 def UFtoName ( uf : int ) -> str : '''Given a UF code, the name of the state Args: uf (int): UF Code Returns: state (str): Name of the state ''' return UF_code . get ( uf , dict ()) . get ( 'name' , '' )","title":"UFtoName()"},{"location":"dictionaries/#notebooks.dictionaries.regions.UFtoNameRegion","text":"Given a UF code, retuns the dictionary of the region Parameters: Name Type Description Default uf int UF Code required Returns: Type Description dict region dictonary (dict): Dictionary of the region Source code in notebooks\\dictionaries\\regions.py 24 25 26 27 28 29 30 31 32 33 def UFtoNameRegion ( uf : int ) -> dict : '''Given a UF code, retuns the dictionary of the region Args: uf (int): UF Code Returns: region dictonary (dict): Dictionary of the region ''' return UF_code . get ( uf , dict ())","title":"UFtoNameRegion()"},{"location":"dictionaries/#notebooks.dictionaries.regions.UFtoRegion","text":"Given a UF code, retuns the name of the region Parameters: Name Type Description Default uf int UF Code required Returns: Type Description str region name (dict): Name of the region Source code in notebooks\\dictionaries\\regions.py 12 13 14 15 16 17 18 19 20 21 def UFtoRegion ( uf : int ) -> str : '''Given a UF code, retuns the name of the region Args: uf (int): UF Code Returns: region name (dict): Name of the region ''' return UF_code . get ( uf , dict ()) . get ( 'region' , '' )","title":"UFtoRegion()"}]}